// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ItemAcervo {
  id            String       @id @default(uuid())
  dataCriacao   DateTime     @default(now())
  nome          String
  ano           Int
  quantidade    Int
  tipo          String
  dimensoes     String
  informacoes   String
  link          String?
  foto          String
  prateleira    String
  classificacao String
  DoacaoItem    DoacaoItem[]
  Visita        Visita[]
  Oficina       Oficina[]
}

model DoacaoDinheiro {
  id              String   @id @default(uuid())
  dataCriacao     DateTime @default(now())
  tipo            String   @default("Dinheiro")
  quantiaDinheiro Float
  doador          Doador   @relation(fields: [doadorId], references: [id], onDelete: Cascade)
  doadorId        String
}

model DoacaoItem {
  id           String     @id @default(uuid())
  dataCriacao  DateTime   @default(now())
  tipo         String     @default("Item")
  item         ItemAcervo @relation(fields: [itemAcervoId], references: [id], onDelete: Cascade)
  itemAcervoId String
  doador       Doador     @relation(fields: [doadorId], references: [id], onDelete: Cascade)
  doadorId     String
}

model Doador {
  id              String           @id @default(uuid())
  nome            String
  cpf             String           @unique
  email           String
  DoacoesDinheiro DoacaoDinheiro[]
  DoacoesItem     DoacaoItem[]
}

model Local {
  id      String    @id @default(uuid())
  rua     String
  bairro  String
  cidade  String
  estado  String
  cep     String    @unique
  Visita  Visita[]
  Oficina Oficina[]
}

model Visitante {
  id       String     @id @default(uuid())
  nome     String
  cpf      String     @unique
  email    String
  visitas  Visita[]
  Oficina  Oficina[]
  Feedback Feedback[]
}

model Organizador {
  id     String   @id @default(uuid())
  nome   String
  cpf    String   @unique
  email  String
  Visita Visita[]
}

model Visita {
  id            String       @id @default(uuid())
  dataHora      DateTime
  local         Local        @relation(fields: [localId], references: [id], onDelete: Cascade)
  visitantes    Visitante[]
  itensAcervo   ItemAcervo[]
  organizador   Organizador  @relation(fields: [organizadorId], references: [id], onDelete: Cascade)
  organizadorId String
  localId       String
}

model Palestrante {
  id      String    @id @default(uuid())
  nome    String
  cpf     String    @unique
  email   String
  Oficina Oficina[]
}

model Oficina {
  id            String       @id @default(uuid())
  titulo        String
  dataHora      DateTime
  local         Local        @relation(fields: [localId], references: [id], onDelete: Cascade)
  duracao       String
  resumo        String
  itensAcervo   ItemAcervo[]
  palestrante   Palestrante  @relation(fields: [palestranteId], references: [id], onDelete: Cascade)
  visitantes    Visitante[]
  localId       String
  palestranteId String
}

model Feedback {
  id          String    @id @default(uuid())
  dataCriacao DateTime  @default(now())
  conteudo    String
  nota        Int
  visitante   Visitante @relation(fields: [visitanteId], references: [id], onDelete: Cascade)
  visitanteId String
}

model Teste {
  id   String @id @default(uuid())
  nome String
}
